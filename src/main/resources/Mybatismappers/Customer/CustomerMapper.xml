<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Customer">
    <!--查询所有用户信息-->
    <!--其中，start是页码，pageSize是条数-->
    <!--分页select user_id,username,password,createdate,telephone from tbl_customer limit (start-1)*pageSize,pageSize-->
    <select id="queryCustomerList" parameterType="com.ambition.entity.Customer.Customer" resultMap="customerListResult">
        SELECT user_id,username,password,createdate,telephone,customer_state, address1,address2,address3 from( tbl_customer a LEFT JOIN tbl_cu_address b ON a.user_id=b.customer_id)LEFT JOIN tbl_cu_state c  ON a.user_id=c.customer_id  where delete_status = #{isDel}
        <if test="username!=null &amp;&amp; !&quot;&quot;.equals(username.trim())">
            and username like '%' #{username} '%'
        </if>
        <if test="telephone!=null &amp;&amp; !&quot;&quot;.equals(telephone.trim())">
            and telephone like '%' #{telephone} '%'
        </if>
        <if test="startdate!=null &amp;&amp; !&quot;&quot;.equals(startdate.trim())">
            <if test="enddate!=null  &amp;&amp; !&quot;&quot;.equals(enddate.trim())">
                and createdate between #{startdate} and #{enddate}
            </if>
        </if>
        <if test="pages!=null &amp;&amp; limits!=null ">
                limit #{pages} , #{limits}
        </if>
    </select>
    <!--其中，id标签表示数据库中主键，column表示数据库中字段名称，property表示实体类中的字段名称-->
    <!--其中，除主键外的其他数据使用result标签-->
    <resultMap id="customerListResult" type="com.ambition.entity.Customer.Customer">
        <id column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="username" jdbcType="VARCHAR" javaType="String" property="username"/>
        <result column="password" jdbcType="VARCHAR" javaType="String" property="password"/>
        <result column="createdate" jdbcType="DATE" javaType="java.sql.Date" property="createdate"/>
        <result column="telephone" jdbcType="VARCHAR" javaType="String" property="telephone"/>
        <collection property="customerAddressList" resultMap="CustomerAddress.customerAddressList"/>
        <collection property="customerStates" resultMap="CustomerStates.customerStatesList"/>
    </resultMap>

    <!--<delete id="deleteOne" parameterType="Object">-->
    <!--delete from tbl_customer where user_id = #{_parameter}-->
    <!--</delete>-->

    <!--&lt;!&ndash;实现批量删除，其中parameterType为传入值的类型，foreach标签用来遍历List集合，collection表示需要遍历list集合，separator表示集合中的前后元素的分隔符&ndash;&gt;-->
    <!--<delete id="deleteBatch" parameterType="java.util.List">-->
    <!--delete from tbl_customer where user_id in (-->
    <!--<foreach collection="list" item="item" separator=",">-->
    <!--#{item}-->
    <!--</foreach>-->
    <!--)-->
    <!--</delete>-->


    <!--实现单个假删除，其中parameterType为传入值的类型，foreach标签用来遍历List集合，collection表示需要遍历list集合，separator表示集合中的前后元素的分隔符-->
    <update id="deleteOne" parameterType="Object">
      update tbl_customer set delete_status = 1 where user_id = #{_parameter}
    </update>

    <!--实现批量假删除，其中parameterType为传入值的类型，foreach标签用来遍历List集合，collection表示需要遍历list集合，separator表示集合中的前后元素的分隔符-->
    <update id="deleteBatch" parameterType="java.util.List">
        update tbl_customer set delete_status = 1 where user_id in (
        <foreach collection="list" item="item" separator=",">
            #{item}
        </foreach>
        )
    </update>

    <!--实现单个用户恢复，其中parameterType为传入值的类型，foreach标签用来遍历List集合，collection表示需要遍历list集合，separator表示集合中的前后元素的分隔符-->
    <update id="recOne" parameterType="Object">
      update tbl_customer set delete_status = 0 where user_id = #{_parameter}
    </update>

    <!--实现批量用户恢复，其中parameterType为传入值的类型，foreach标签用来遍历List集合，collection表示需要遍历list集合，separator表示集合中的前后元素的分隔符-->
    <update id="recBatch" parameterType="java.util.List">
        update tbl_customer set delete_status = 0 where user_id in (
        <foreach collection="list" item="item" separator=",">
            #{item}
        </foreach>
        )
    </update>

    <!--实现用户信息修改-->
    <update id="editCustomer" parameterType="com.ambition.entity.Customer.Customer">
      update tbl_customer set telephone = #{telephone} , password=#{password},username=#{username} where user_id = #{userId}
    </update>


    <!--用户注册开始-->
    <!--客户注册时信息，地址表和信息表同时插入，但地址都为空-->
    <insert id="addCustomer" useGeneratedKeys="true" keyProperty="userId" keyColumn="user_id" parameterType="com.ambition.entity.Customer.Customer">
		insert into tbl_customer (username, password, createdate, telephone,delete_status)
		 values (#{username},#{password},#{createdate},#{telephone},#{delete_status} )
	</insert>
    <!--插入刚刚查到的tbl_customer表中的自增ID为tbl_cu_address中的customer_id-->
    <insert id="addCustomeraddress" parameterType="Integer">
		insert into tbl_cu_address (customer_id,address1,address2,address3)
		values (#{_parameter},null,null,null)
	</insert>
    <insert id="addCustomerstate" parameterType="Integer">
		insert into tbl_cu_state (customer_id,customer_state)
		values (#{_parameter},0)
	</insert>
    <!--用户注册结束-->

    <select id="doLogin" parameterType="com.ambition.entity.Customer.Customer" resultMap="customerListResult">
        SELECT user_id,username from tbl_customer where delete_status = #{isDel} and telephone=#{telephone} and password=#{password}
    </select>
</mapper>
